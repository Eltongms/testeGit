
TERMOS COMUMS NOS MANUAIS OFICIAIS E NA INTERNET

STAGE AREA == INDEX == CACHE
HEAD == COMMIT ATUAL

CONVENÇÃO PARA ESTE MANUAL

ST = STAGE AREA
WD = WORK DIRECTORY
H = HEAD
C = NEXT COMMIT
NULL = DELETADO


ADICIONADO E EXCLUINDO ARQUIVOS

WD => ST
git add file.js  # seja novo/atualização/deleção  em work directory

NULL => ST
rm file.js
git add file.js  # após deletado no  WD este comando faz o registro da deleção no ST e depois confirma com o commit git.

WD => NULL e ST => NULL
git rm file.js #apaga do sistema de arquivo e registra a deleção no stage

ST => NULL
git rm --cached file.js #  stage -> null    remove SOMENTE do stage, implica em ausencia deste arquivo no próximo commit caso ele não exista no HEAD

H => WD
git restore  file.js     copia do head para o work directory, descartando assim o que estiver no destino

H => ST
git restore --stage file.js # copia para o stage a versão que está no HEAD, independente do que está no diretório.

H => ST e H => WD
git restore --stage --worktree 

H => WD
git checkout file.js

H => ST 
git reset HEAD file  # mesmo resultado de git restore --stage file


COMPARANDO ARQUIVOS

1º HEAD = WD = STAGE     
2º WD é alterado             usa o git diff (compara o WD com stage) OU usa o git diff HEAD (compara o WD com o HEAD)
3º STAGE é igualado ao WD    usa o git diff --staged ou cached  (compara o STAGE com HEAD)


WD != ST
git diff

HEAD != WD
git diff HEAD file

HEAD != ST
git diff --staged 
git diff --cached


git log -p file  # exibe as difereças de cadas arquivos em todos os commit
git log -p -<n> file  # exibe as difereças de cadas arquivos em n commit


Nos casos abaixo a ordem faz diferença
git diff branch1 branch2
git diff hash1 hash2



ENDTENDENDO A SAÍDA DO DIFF
https://www.freecodecamp.org/news/git-diff-command/

--- a/file.js  # old version
--- b/file.js  # new version


sinal de - refere-se ao arquivo antigo e + ao arquivo novo

If the sets look like -3,4 +3,2, then:

-3,4  visualização de 4 linhas a partir da linha 3 no arquivo velho
+3,2  visualização de 2 linhas a partir da linha 2 no arquivo novo

em verde linhas adicionadas
em vermelho linhas excluidas



- DIRETÓRIO DE TRABALHO

git rm -f file.js # apaga do stage e do diretório de tabalho


OPÇÕES DE COMMIT


git commit --amend  # cria um novo commit, novo hash, que substiui o anterior
git reflog  # é possível ver os commit substituído

git commit --amend --no-edit  # faz o amend sem alterar a mensagem







HEAD é um apontamento para o nódulo atualmente ativo (arquivos em que está trabalhando).

O estado normal do git é 

MOVENDO PELOS NODOS

HEAD -> main -> C2. 
Mas é possível soltar a cabeça (detached) com 

git checkout C2
ficando HEAD -> C2  e main -> C2

Para prender a cabeça basta dar um checkout em um dos branch
git checkout main

Mudando o branch(ponteiro) para outro nodo
git branch -f main a584s

REFERÊNCIAS RELATIVAS

git checkout main^    volta um nível
git checkout main^^   volta dois nível

git checkout HEAD^   volta o head uma vez


git checktou main~3  volta o main 3 nodos


MANIPULANDO BRANCH

git branch <nomebranch> # criar branch

git push origin --delete <nome do ramo> # exclui branch remoto

git push --set-upstream origin novobreacn   # envia novo breanch para o remoto






REVERTENDO MUDANÇAS

Descart as mudanção em único arquivo desde o ultimo commit
git restore <file>


Descartar tudo no work directory e stage area, retornado para o ultimo commit. Os arquivos untraked permanecem 
git reset --hard HEAD


Desfazer o ultimo commit mantendo os arquivos no work directory ou na Stage Area se já estiverem lá.
git reset HEAD~1


Descartar untracked files
git clean -fd

Cria uma cópia do penultimo commit e o coloca a frente, tornando as altereção do ultimo sem efeito mas mantendo o histórico
git revert HEAD


BRANCH

para criar um branch usa-se

git checkout -b nomebranch
git switch -c nomebranch para criar.  #NOVO 2.23

show all branch, what is selected. -v show comments

# trocar de branch
git switch nomebranch 





EXIBIR 

git log --oneline (faz cada comiit ocupa uma linha) --all (exibe de todos os branch) --decorate (informa em qual branch está cada commit) --graph (faz um grafico)
git branch -v (mostra os branch existentes e, onde estáo HEAD e os descritivos)
git branch --merged
git branch --no-merged
git refrog  # mostra todos os commits

CONFIGURANDO GIT

Crie o repositório no githun

git init
git add .
git commit -m "inicio"
git remote add origin git@github.com:Eltongms/exercios.git
git push origin main


Descritivos 
(main) é local
(origin/main) é local onde o push foi atualizado pela ultima vez
CHECKANDO CONFIGURAÇÃO 

# para usar ssh o endereço precisa estar dessa forma
git remote  -v
origin	git@github.com:Eltongms/testeGit.git (fetch)
origin	git@github.com:Eltongms/testeGit.git (push)

# caso não esteja é preciso corrigier usando:
git remote set-url --add origin git@github.com:Eltongms/testeGit.git


git remote show # mostra os repositórios remotos configurados
git remot show origin # mostra os detalhes de um repositório.



CLONANDO

git clone https://github.com/Eltongms/testeGit.git

- Acessando branch remoto

git branch -a
git checkout -b nomebranch origin/nomebranch   # vai criar uma branch local baseado no branch remoto


ENVIANDO DE VOLTA

 
 git push # enviará apenas o branch atual
 git push origin reattach # enviará um branch especifico



GIT MERGE

m1 -> m2 -> m3(main*) 
b1 -> b2(bugFix)

git merge bugFix

m1 -> m2 -> m3 -> m3b2(main*)
b1 -> b2(bugFix)

git checkout bugFix; git merge main;

m1 -> m2 -> m3 -> mb4(main*)(bugFix)
b1 -> b2
 

# Cria um novo nódulo que mescla main a bugFix, possuindo ambos branch como ancestrais, o branch selecionado continua sendo main que passa a pontar para o novo nódulo, o branch bugFix permanece parado onde estava. 
# Se for necessário corrigir basta selecionar bugFix e fazer merge com main, isto fará ambos branch aponterem para o novo nódulo.


GIT REBASE

m1 -> m2 -> m3(main) 
b1 -> b2(bugFix*)

git rebase main (main é o destino para onde vão os comits)

m1 -> m2 -> m3(main) -> b1 -> b2(bugFix*) 


# pega o branch bugFix e o coloca a frente do main, esse branch atual deixa de existir, passando a ser um nódulo a frente 
# para fazer o main retomar a ponto do ramo faça :

git checkout main 
git rebase bugfix

m1 -> m2 -> m3(main) -> b1 -> b2(bugFix) -> m3b2(main*)


TAGs

git tag -a v1.0 -m "minha versão 1.0"  # cria a etiqueta no commit atual
$ git tag -a v0.1 c5d15de -m "versão beta" # cria em commit passado
-a = annotated  (opcional mas recomendável)

git tag  # retorna todas as etiquetas.

git show v1.0  # mostra informações detalhadas desta etiqueta





